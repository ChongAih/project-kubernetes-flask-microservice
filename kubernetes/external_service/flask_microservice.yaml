# Deployment & Service
# Metadata & Status & Spec (Status is generated by K8s and compared with Spec)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-microservice-deployment
  namespace: flask-microservice-namespace
  labels:
    app: flask-microservice
spec:
  replicas: 1
  # Which ports belong to which deployment identified using matchLabels
  selector:
    matchLabels:
      app: flask-microservice
  # Blueprint for pods
  template:
    metadata:
      # All pods will have the same label
      labels:
        app: flask-microservice
    spec:
      containers:
        - name: flask-microservice
          image: flask_microservice:prod
          ports:
            - containerPort: 5000
          # Similar to Docker resource management
          # Subject to limit (kubectl get nodes)
          resources:
            limits:
              cpu: "1"
            requests:
              cpu: "1"
          env:
            - name: FLASK_MICROSERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  name: flask-microservice-config
                  key: FLASK_MICROSERVICE_PORT
            - name: FLASK_MICROSERVICE_ENV
              valueFrom:
                configMapKeyRef:
                  name: flask-microservice-config
                  key: FLASK_MICROSERVICE_ENV
---
# Service - expose an application running on a set of Pods as a network service
apiVersion: v1
kind: Service
metadata:
  name: flask-microservice-service
  namespace: flask-microservice-namespace
spec:
  # Set to be external service
  type: NodePort
  # service will forward request to the port with the selector label
  # should match the label of the pods
  selector:
    app: flask-microservice
  ports:
    - protocol: TCP
      # External request will be channeled through this port
      port: 5000
      # targetPort should be same as containerPort
      targetPort: 5000
      # exposes the service on each Node'IP at a static port
      # Range is between 30000 - 32767
      nodePort: 30000